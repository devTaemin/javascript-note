// 1) 함수 표현식
//  : 함수는 다른 언어에서 "특별한 동작을 하는 구조"로 취급하지만, 자바스크립트는 "특별한 종류의 값"으로 취급한다.
//  : 함수 선언 예시
function sayHi() {
    console.log("Hi");
}
//  : 함수 표현식 예시
let sayHello = function() {
    console.log("Hello");
}
//  : 함수는 값이기 때문에 함수를 그대로 출력할 수 있다.
console.log(sayHi);
//  : 자바스크립트는 괄호가 붙어야 함수가 호출되어 실행된다.
//  : 함수를 값처럼 취급할 수 있으며 변수를 복사해 다른 변수에 할당하는 것처럼 함수를 복사해 다른 변수에 할당할 수 있다.
//  : 만약 변수에 함수를 할당할 때, 함수이름에 ()를 붙인 경우에는 함수가 아닌 호출 결과가 할당된다.
//  : 중괄호로 만든 코드 블록 끝에는 세미콜론(;)이 없어도 된다.
let func = sayHi;
func();
sayHi();


// 2) 콜백함수
//  : 함수를 함수의 인자로 전달하고, 필요하면 인수로 전달한 해당 함수를 나중에 호출하는 것이 콜백함수이다.
//  : 익명함수를 활용해서 선언하면 코드의 길이를 줄일 수 있으며, 바깥에서 접근할 수 없다.
function ask(question, yes, no){
    if(confirm(question)) yes();
    else no();
}

function showOk(){
    alert("Agree");
}

function showCancel(){
    alert("Disagree");
}

ask("Do you agree?", showOk, showCancel);

ask(
    "Do you agree?",
    function() {alert("Agree with you");},
    function() {alert("Disagree with you");}
);


// 3) 함수 표현식 vs 함수 선언문
//  : 1) 문법의 차이
//  : 2) 자바스크립트 엔진이 언제 함수를 생성하는지의 차이
//      -> 함수 선언문은 함수 선언문이 정의되기 전에 호출될 수 있다.따라서 스크립트 어디에 있든 상관없이 어디에서든 사용할 수 있다.
//      -> 스크립트는 함수 선언문이 모두 처리된 이후에 실행된다.
//      -> 함수 표현식은 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 실행한다.
//  : 3) 스코프
//      -> 엄격 모드에서 함수 선언문이 코드 블록 내에 위치하면 해당 함수는 블록 내에 어디든 접근할 수 있지만 밖에서는 함수에 접근할 수 없다.
//      -> 함수 표현식을 이용하면 어디서든 접근할 수 있는 함수를 작성할 수 있다.
